#!/usr/bin/env bash
if [ -z $(which tmux) ] || [ -z $(which fzf) ] || [ -z $(which fd) ] || [ -z $(which vifm) ] || [ -z $(which nvim) ] || [ -z $(which nvr) ]; then
  echo ""
  echo "  Please be sure that the following programs are installed:"
  echo ""
  echo "  - tmux"
  echo "  - vifm"
  echo "  - neovim"
  echo "  - neovim-remote"
  echo "  - fzf"
  echo "  - fd"
  echo ""
  echo "  ***MacOs Install***"
  echo ""
  echo "  brew install tmux vifm neovim fzf fd"
  echo "  pip3 neovim-remote"
  echo ""
  exit
fi

default_projects_dir="$HOME/Cloud/Development/projects"
project_types=(bin web)
project_languages=(
  ansible
  docker
  dotnet
  go
  js
  php
  python
  ruby
  sql
)

vim () {
  if [ ! -z "$TMUX" ]; then
    tmux_current_session=$(tmux display-message -p '#S')
    tmux_current_window=$(tmux display-message -p '#I')
    tmux_current_pane=2
    tmux_nvim_socket=$(ls /tmp/ | grep ".*tmux-${tmux_current_session}-${tmux_current_window}-[1-9]-nvimsocket")

    if [[ $tmux_nvim_socket =~ ^tmux-${tmux_current_session}-(${tmux_current_window})-([1-9])-nvimsocket ]]; then
      tmux_target_pane=${BASH_REMATCH[2]}
    else
      tmux_target_pane=0
    fi

    nvim_remote_tmux_socket=/tmp/$tmux_nvim_socket

    if [ -S "/tmp/$tmux_nvim_socket" ] && [ $tmux_target_pane != 0 ]; then
      tmux select-pane -t $tmux_target_pane | nvr --servername $nvim_remote_tmux_socket "$@"
    else
      tmux_current_pane=2
      NVIM_LISTEN_ADDRESS=/tmp/tmux-$tmux_current_session-$tmux_current_window-$tmux_current_pane-nvimsocket nvim "$@"
    fi
  else
    NVIM_LISTEN_ADDRESS=/tmp/nvimsocket nvim "$@"
  fi
}

new () {
  if [ ! -z "$TMUX" ]; then

    tmux new-window 'vifm -c ":only" -c "set vicmd=dmux\ vim";bash -l' \; \
      set -g base-index 1 \; \
      setw -g pane-base-index 1 \; \
      split-window -h 'dmux vim;bash -l' \; \
      split-window -v \; \
      select-layout '6a23,198x71,0,0{39x71,0,0,0,158x71,40,0[158x45,40,0,1,158x25,40,46,2]}' \; \
      select-pane -t 1

  elif [ -z "$TMUX" ] && [ ! -z "$1" ]; then

    project_type=$(printf '%s\n' "${project_types[@]}" | fzf --prompt="  What type of project is this? " --height 30% --reverse)

    if [ -z $project_type ]; then
      exit
    fi

    project_language=$(printf '%s\n' "${project_languages[@]}" | fzf --prompt="  What programming language will it be in? " --height 30% --reverse)

    if [ -z $project_language ]; then
      exit
    fi

    project_path=$default_projects_dir/$project_type/$project_language/$1

    if [ -d "$project_path" ]; then
      echo ""
      echo "  Sorry the project $project_path already exists"
      echo ""
      exit
    fi

    mkdir -p $project_path

    echo ""
    echo "  Project created: ${project_path}"
    echo "  Opening..."
    echo ""
    sleep 2

    dmux init $project_path

  elif [ -z "$TMUX" ] && [ -z "$1" ]; then

      echo ""
      echo "  Please provide a project name to this command e.g. dmux new [project_name]"
      echo ""
      exit
  fi
}

open () {
  if [ -z "$1" ]; then
    dir="$default_projects_dir"
  else
    dir=$1
  fi

  project_path="$(fd . $dir/**/* --type d -d 1 | awk -F/ '{print $(NF-2)FS$(NF-1)FS$(NF)}' | sort | fzf --prompt="  Open Project: $dir/>" --height 30% --reverse | awk -F/ -v dir=$dir '{print dir FS$0}')"

  if [ -z "$project_path" ]; then
    exit
  fi

  dmux init $project_path
}

init () {
  if [ -z "$1" ]; then
    session_name=$(basename -- $(pwd))
    session_dir=$(pwd)
  else
    session_name=$(basename -- $1)
    session_dir=${1}
    if [ ! -z "$(tmux ls | grep $session_name)" ]; then
      echo ""
      echo "  Found existing session: ${session_name}"
      echo "  Opening: ${session_name}"
      echo ""
      sleep 5
      tmux a -t ${session_name}
    fi
  fi

  tmux \
    new-session -c ${session_dir} -s $(basename -- ${session_name}) 'vifm -c ":only" -c "set vicmd=dmux\ vim";bash -l' \; \
    split-window -h 'dmux vim;bash -l' \; \
    split-window -h \; \
    select-layout '6a23,198x71,0,0{39x71,0,0,0,158x71,40,0[158x45,40,0,1,158x25,40,46,2]}' \; \
    set -g base-index 1 \; \
    setw -g pane-base-index 1 \; \
    select-pane -t 1 \; \
    set -g status-keys vi \; \
    set -g history-limit 10000 \; \
    set -sg escape-time 0 \; \
    setw -g mode-keys vi \; \
    setw -g monitor-activity on \; \
    bind -n C-h select-pane -L \; \
    bind -n C-j select-pane -D \; \
    bind -n C-k select-pane -U \; \
    bind -n C-l select-pane -R \; \
    bind-key C-j resize-pane -D \; \
    bind-key C-k resize-pane -U \; \
    bind-key C-h resize-pane -L \; \
    bind-key C-l resize-pane -R \; \
    bind-key v split-window -h \; \
    bind-key s split-window -v \; \
    bind-key e run-shell 'dmux new' \; \
    bind-key -n C-z select-pane -t 2 \\\; resize-pane -Z \; \
    bind-key -n C-q kill-session \; \
    bind-key -n S-Down select-pane -t 3 \\\; break-pane -d -n _terminal_pane \; \
    bind-key -n S-Up select-pane -t 2 \\\; join-pane -s $.1 -l 10
}

# Check if the function exists (bash specific)
if declare -f "$1" > /dev/null
then
  # call arguments verbatim
  "$@"
else
  # Show a helpful error
  if [[ "${1}" == '' ]]; then
    init
  else
    echo "'$1' is not a known function name" >&2
    exit 1
  fi
fi
