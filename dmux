#!/usr/bin/env bash
declare -A executables=(
  [tmux]=tmux
  [fzf]=fzf
  [fd]=fd
  [vifm]=vifm
  [nvim]=neovim
  [nvr]=neovim-remote
)

executables_found=($(which ${!executables[@]} | awk -F'/' '{print $(NF)}'))
executables_needed=()
for i in "${!executables[@]}"; do
  if [[ ! "${executables_found[@]}" =~ "${i}" ]]; then
    executables_needed+=(${executables[$i]})
  fi
done

if [[ ! -z "${executables_needed[@]}" ]]; then
  echo ""
  echo "  Please be sure that the missing programs are installed:"
  echo ""
  printf '  - %s \n' "${executables_needed[@]}"
  echo ""
  echo "  Example:"
  echo ""
  echo "  $ brew install tmux vifm neovim fzf fd # Only need to install what you are missing"
  echo "  $ pip3 neovim-remote # Only need to install what you are missing"
  exit
fi

if [ ! -f "$HOME/.dmux.conf" ]; then
tee ~/.dmux.conf <<'EOF' > /dev/null
# 0 is too far from ` ;)
set -g base-index 1
setw -g pane-base-index 1

# Automatically set window title
set-window-option -g automatic-rename on
set-option -g set-titles on

set -g status-keys vi
set -g history-limit 10000
setw -g monitor-activity on

# bind-key -n C-v send-keys -t 3 !! Enter

bind-key v split-window -h
bind-key s split-window -v

bind-key C-j resize-pane -D
bind-key C-k resize-pane -U
bind-key C-h resize-pane -L
bind-key C-l resize-pane -R

# Use Alt-vim keys without prefix key to switch panes
bind -n C-h select-pane -L
bind -n C-j select-pane -D
bind -n C-k select-pane -U
bind -n C-l select-pane -R

bind -n S-( switch-client -p \; refresh-client -S
bind -n S-) switch-client -n \; refresh-client -S

# Shift arrow to switch sessions
bind -n M-Left switch-client -p \; refresh-client -S
bind -n M-Right switch-client -n \; refresh-client -S
bind -n S-Left previous-window
bind -n S-Right next-window

set -g status-interval 2
bind -n M-o split-window -t 2 -l 10 -b -v 'dmux open'
bind -n M-n split-window -t 2 -l 10 -b -v 'dmux new'
bind -n M-c split-window -t 2 -l 10 -b -v 'dmux clone'
bind -n M-s split-window -t 2 -l 10 -b -v 'dmux sessions'
bind -n M-q split-window -t 2 -l 3 -b -v 'dmux session_quit'
bind -n C-q split-window -t 2 -l 3 -b -v 'dmux window_quit'
bind -n C-w run-shell 'dmux window'
bind -n M-r select-layout '32f3,191x73,0,0{35x73,0,0,0,155x73,36,0[155x54,36,0,1,155x18,36,55,2]}'

set -g status-right "#(dmux sessions_status_line) #[fg=black,bg=green] "
set -g status-right-length 60

# No delay for escape key press
set -sg escape-time 0

# Reload tmux config
bind r source-file ~/.tmux.conf \; display-message "Config reloaded."

# Add truecolor support
set-option -ga terminal-overrides ",xterm-256color*:Tc"

# Default terminal is 256 colors
set -g default-terminal "screen-256color"
# set -g default-terminal "tmux-256color-italic"

set -g status "on"

set -g status-style "none,bg=#2c323c"
set -g status-left-style "none"
set -g status-right-style "none"
set -g message-style " fg=black,bg=green"
set -g message-command-style "fg=white,bg=black"

set -g pane-border-style 'fg=black,bg=#1d1f25'
set -g pane-active-border-style 'fg=#1d1f25,bg=#1d1f25'

set -g window-active-style 'fg=colour250,bg=black'
set -g window-style 'fg=#53616b,bg=#1d1f25'

set -g status-left "#(dmux status_left)"
set -g status-left-length "20"

setw -g window-status-activity-style "none"
setw -g window-status-style "none"
setw -g window-status-separator ""
setw -g window-status-format ""
set -g status-justify "left"

set -g status-right-length "150"
setw -g window-status-current-format "#(dmux status_window)"
setw -g window-status-format "#[fg=#2c323c,bg=#3b4048]#[fg=#abb2bf,bg=#3b4048]#F #W #[fg=#3b4048,bg=#2c323c]"
EOF
fi

if [ -z "$DMUX_PROJECTS" ]; then
  echo ""
  echo "  Please specify the directory you want your projects to be stored in"
  echo "  by adding the environment variable as show in the example below"
  echo "  to you bashrc."
  echo ""
  echo "  export DMUX_PROJECTS=$HOME/Cloud/Development/projects"
  echo ""
  exit
fi

default_projects_dir="$DMUX_PROJECTS"
if [ -z "$DMUX_LAYOUT" ]; then
 layout='32f3,191x73,0,0{35x73,0,0,0,155x73,36,0[155x54,36,0,1,155x18,36,55,2]}'
else
  layout=$DMUX_LAYOUT
fi

fzf_height=$(test -z "$TMUX" && echo '--height 30%' || echo '--height 100%')
fzf_opts="
 --ansi ${fzf_height} --no-border --reverse --header ..
 --margin 0,1,1,1
 --color=dark
 --color=fg:#d0d0d0,bg:#282c34,hl:#5f87af
 --color=fg+:#d0d0d0,bg+:#282c34,hl+:#5fd7ff
 --color=info:#d7005f,prompt:#c678dd,pointer:#af5fff
 --color=header:#282c34,gutter:#282c34
 --color=marker:#87ff00,spinner:#af5fff"

get_reply () {

  prompt=$1

  set -o emacs
  bind '"\C-w": kill-whole-line'
  bind '"\e": "\C-w\C-d"'
  bind '"\e\e": "\C-w\C-d"'
  IFS= read -rep "  $(addc 'magenta' "$1") " || {
    read -st 1 -n 1000000
      exit 1
    }
  echo $REPLY
}

declare -A fgcolor=(
  [none]=0
  [black]=30
  [red]=31
  [green]=32
  [yellow]=33
  [blue]=34
  [magenta]=35
  [cyan]=36
  [white]=37
)

declare -A bgcolor=(
  [black]=40
  [red]=41
  [green]=42
  [yellow]=43
  [blue]=44
  [magenta]=45
  [cyan]=46
  [white]=47
)

declare -A attributes=(
  [none]=0
  [bold]=1
  [underscore]=4
  [blink]=5
  [reverseVideo]=7
  [concealed]=8
)

declare -A types=(
  [web]=
  [desktop]=
  [game]=
  [mobile]=
  [cli]=
)

declare -A languages=(
  [ansible]=
  [docker]=
  [txt]=e
  [styl]=
  [scss]=
  [html]=
  [slim]=
  [ejs]=
  [wordpress]=
  [gulp]=
  [gulpfile]=
  [css]=
  [less]=
  [md]=
  [drupal]=
  [markdown]=
  [json]=
  [js]=
  # [code]=
  [jsx]=
  [ruby]=
  [gem]=
  [php]=
  [py]=
  [pyc]=
  [pyo]=
  [pyd]=
  [python]=
  [coffee]=
  [mustache]=
  [handlebars]=
  [hbs]=
  [conf]=
  [ini]=
  [yml]=
  [bat]=
  # [jpg]=
  # [jpeg]=
  # [bmp]=
  # [png]=
  # [gif]=
  # [ico]=
  [twig]=
  [cpp]=
  [c++]=
  [dotnet]=
  [c\#]=
  [cxx]=
  [cc]=
  [cp]=
  [c]=
  [hs]=
  [lhs]=
  [lua]=
  [java]=
  [bash]=$
  [sh]=
  [fish]=
  [ml]=λ
  [mli]=λ
  [diff]=
  [db]=
  [sql]=
  [dump]=
  [clj]=
  [cljc]=
  [cljs]=
  [edn]=
  [scala]=
  [go]=
  [dart]=
  [xul]=
  [sln]=
  [suo]=
  [pl]=
  [pm]=
  [t]=
  [rss]=
  [f#]=
  [fsscript]=
  [fsx]=
  [fs]=
  [fsi]=
  [rs]=
  [rlib]=
  [d]=
  [erl]=
  [hrl]=
  [vim]=
  [react]=
  [puppet]=
  [vue]=﵂
  [elm]=
  [swift]=
  # [vim]=
  # [ai]=
  # [psd]=
  # [psb]=
  [ts]=
  [tsx]=
  [jl]=
)

declare -A colormap=(
  [web]=blue
  [desktop]=yellow
  [game]=red
  [mobile]=magenta
  [cli]=green
  [ansible]=yellow
  [bash]=blue
  [ruby]=magenta
  [gem]=magenta
  [php]=blue
  [js]=yellow
  [go]=cyan
  [dart]=blue
  [puppet]=magenta
  [twig]=green
  [sass]=red
  [react]=blue
  [vim]=green
  [vue]=green
  [html]=yellow
  [css]=blue
  [dotnet]=magenta
  [drupal]=blue
  [markdown]=white
  [python]=blue
  [docker]=blue
  [coffee]=blue
  [ts]=blue
  [tsx]=blue
  [c\#]=magenta
  [gulp]=red
  [swift]=red
  [c++]=blue
  [cc]=blue
  [cpp]=blue
  [cxx]=blue
  [py]=blue
  [pyc]=blue
  [pyo]=blue
  [pyd]=blue
  [cp]=blue
  [db]=blue
  [sql]=blue
  [dump]=blue
  [java]=red
  [diff]=red
  [d]=red
  [lua]=blue
  [c]=blue
  [clj]=blue
  [cljc]=blue
  [cljs]=blue
  [edn]=blue
  [scala]=red
  [gulpfile]=red
  [wordpress]=white
)

declare -A icons=()

for i in "${!types[@]}"
do
  if [ -z "${icons[$i]}" ]; then
    icons[$i]=${types[$i]}
  fi
done

for i in "${!languages[@]}"
do
  if [ -z "${icons[$i]}" ]; then
    icons[$i]=${languages[$i]}
  fi
done

# Default color to none
for i in "${!languages[@]}"
do
  if [ -z "${colormap[$i]}" ]; then
    colormap[$i]=none
  fi
done

# Default color to none
for i in "${!types[@]}"
do
  if [ -z "${colormap[$i]}" ]; then
    colormap[$i]=none
  fi
done

project_types=()
project_languages=()

for i in "${!types[@]}"
do
  project_types+=("$i")
done

for i in "${!languages[@]}"
do
  project_languages+=("$i")
done

vim () {
  if [ ! -z "$TMUX" ]; then
    current_session=$(tmux display-message -p '#S')
    current_window=$(tmux display-message -p '#I')
    current_session_window=tmux-$current_session-$current_window
    target_pane=$(tmux display-message -p '#P')
    nvim_socket=$(find /tmp/* -type s -regex ".*$current_session_window-[1-9]-nvimsocket")

    # Check to see if there is a socker for the current session
    if [ -z "$tmux_nvim_socket" ]; then
      # Open vim in current pane
      NVIM_LISTEN_ADDRESS=/tmp/$current_session_window-$target_pane-nvimsocket nvim "$@"
    else
      # Open file in vim from another pane
      target_pane=$(echo $nvim_socket | awk -F'-' '{print $(NF -1)}')
      tmux select-pane -t $target_pane \; run-shell "nvr --servername $nvim_socket "$@""
    fi
  else
    NVIM_LISTEN_ADDRESS=/tmp/nvimsocket nvim "$@"
  fi
}

vifm () {
  if [ ! -z "$TMUX" ]; then
    current_session=$(tmux display-message -p '#S')
    current_window=$(tmux display-message -p '#I')
    current_session_window=tmux-$current_session-$current_window
    # target_pane=$(tmux display-message -p '#P')
    # hard coding till I can find a way to open vifm in a pane and
    # it keep the pane id or waits till it is open to coninue
    target_pane=1
    servername="$current_session_window-$target_pane-vifm"

    command vifm --server-name ${servername} -c ":only" -c "set vicmd=dmux\ vim"
  else
    command vifm -c ":only" -c "set vicmd=dmux\ vim"
  fi

}

iconize_new () {
  while read data; do
    echo -e "$(addcolor ${icons[$data]} $data)  $data"
  done
}

addc () {

  prefix="\033["
  suffix="m"

  echo -e "$prefix${fgcolor[$1]}$suffix$2$prefix${fgcolor[none]}$suffix"
}
addcolor () {

  prefix="\033["
  suffix="m"

  echo -e "$prefix${fgcolor[${colormap[$2]}]}$suffix$1$prefix${fgcolor[none]}$suffix"
}

sessions () {
  sessions=($(echo $(tmux list-sessions -F '#S')))
  current_session=$(tmux display-message -p '#S')
  last_session=$(tmux display-message -p '#{client_last_session}')

  for i in "${!sessions[@]}"; do
    if [[ "${sessions[$i]}" = "${last_session}" ]]; then
      last_session_index="${i}"
    fi
  done
  new_session_list=($last_session)
  unset sessions[$last_session_index]
  for i in "${!sessions[@]}"; do
    new_session_list+=(${sessions[$i]})
  done

  session=$(printf "%s\n" ${new_session_list[@]} | fzf ${fzf_opts} --prompt=" Sessions: ")

  if [[ "${new_session_list[@]}" =~ "${session}" ]]; then
    tmux switch-client -t $session
  fi
}

session_quit () {

  tmux_current_session=$(tmux display-message -p '#S')
  sessions=($(echo $(tmux list-sessions -F '#S')))
  sessions_length=${#sessions[@]}
  confirm=$(get_reply 'Close current session "'$tmux_current_session'"?')

  if [ "$sessions_length" -gt 1 ]; then
    if [ "$confirm" = "yes" ]; then
      tmux switch-client -p \; kill-session -t $tmux_current_session
    fi
  else
    if [ "$confirm" = "yes" ]; then
      tmux kill-session -t $tmux_current_session
    fi
  fi
}

get_vim_buffer () {
  session_name=$1
  position=$2
  if [ ! -z "$session_name" ]; then
    buffer=$(nvr --servername /tmp/tmux-${1}-1-2-nvimsocket --nostart --remote-expr 'bufname("")')
    if [ ! -z "$buffer" ]; then
      if [ "$position" = "1" ] ||  [ "$position" = "2" ]; then
        echo "$(basename ${buffer})  $session_name"
      else
        echo "$session_name  $(basename ${buffer})"
      fi
    else
      echo $session_name
    fi
  fi
}

sessions_status_line () {

  sessions=($(echo $(tmux list-sessions -F '#S')))
  current_session=$(tmux display-message -p '#S')

  for i in "${!sessions[@]}"; do
    if [[ "${sessions[$i]}" = "${current_session}" ]]; then
      current_session_index="${i}"
    fi
  done

  sessions_length=${#sessions[@]}
  sessions_last_index=$((${sessions_length} - 1))
  sessions_second_to_last_index=$((${sessions_last_index} - 1))
  session_before_current_index=$((${current_session_index} - 1))
  session_after_current_index=$((${current_session_index} + 1))

  if [ "$current_session_index" = "0" ]; then
    previous_session_index=${sessions_last_index}
    previous_previous_session_index=$((${sessions_last_index} - 1))
  else
    previous_session_index=${session_before_current_index}
    if [ "$previous_session_index" = "0" ]; then
      previous_previous_session_index=${sessions_last_index}
    else
      previous_previous_session_index=$((${session_before_current_index} - 1))
    fi
  fi

  if [ "$current_session_index" = "$sessions_last_index" ]; then
    next_session_index=0
    next_next_session_index=1
  else
    next_session_index=$session_after_current_index
    if [ "$next_session_index" = "$sessions_last_index" ]; then
      next_next_session_index=0
    else
      next_next_session_index=$((${session_after_current_index} + 1))
    fi
  fi


  position1="$(get_vim_buffer ${sessions[$previous_previous_session_index]} 1)"
  position2="$(get_vim_buffer ${sessions[$previous_session_index]} 2)"
  position3="$(get_vim_buffer ${sessions[$next_session_index]} 3)"
  position4="$(get_vim_buffer ${sessions[$next_next_session_index]} 4)"
  position5=" $sessions_length"

  center_text="$current_session"
  # center_text=""

  color_text="#abb2bf"
  color_green="green"
  color_black="black"
  color_gray="#3b4048"
  color_none="#2c323c"
  color_white="white"
  color_center_end="green"
  color_center_end_left="$color_none"
  color_center_end_right="$color_none"
  color_position2_end_left="$color_none"
  color_position3_end_right="$color_gray"

  if [ "$sessions_length" = 1 ]; then
    color_gray="black"
    color_center_end_left="$color_none"
    color_center_end_left_left="$color_none"
    color_center_end_right="$color_none"
    showcenterright=""
    show4left=""
    show5left=""
  else
    color_center_end_left_left="$color_gray"
    showcenterright="#[fg=${color_green},bg=${color_center_end_right},nobold,nounderscore,noitalics]#[fg=${color_none},bg=${color_gray}]"
    show5left="#[fg=#2c323c,bg=green] "
    show4left="#[fg=#2c323c,bg=green]"
  fi

  if [ "$sessions_length" = 2 ] || [ "$sessions_length" = 3 ]; then
    color_position2_end_left="$color_none"
    color_position3_end_right="$color_gray"
  fi

position1_wrapper="#[fg=${color_none},bg=#2c323c,nobold,nounderscore,noitalics]#[fg=${color_text},bg=${color_none}] ${position1} "
position2_wrapper="#[fg=${color_gray},bg=${color_position2_end_left}]#[fg=${color_text},bg=${color_gray}] ${position2} "
center_piece_wrapper="#[fg=${color_none},bg=${color_center_end_left_left}]#[fg=${color_green},bg=${color_center_end_left},nobold,nounderscore,noitalics]#[fg=${color_green},bg=#98c379,nobold,nounderscore,noitalics]#[fg=${color_black},bg=${color_green},nobold,nounderscore,noitalics] ${center_text} #[fg=#abb2bf,bg=${color_gray}]${showcenterright}"
position3_wrapper="#[fg=${color_text},bg=${color_position3_end_right}] ${position3} #[fg=${color_gray},bg=${color_none},nobold,nounderscore,noitalics]"
position4_wrapper="#[fg=${color_text},bg=${color_none}] ${position4} "
time="  $(date +" %b %d %Y   %T")"
position5_wrapper="${show5left}#[fg=black,bg=green]${position5}  ﲾ $(tmux-mem-cpu-load -m 2 -a 0 --interval 2) "

if [ "$sessions_length" = 1 ]; then
  position1_wrapper=""
  position2_wrapper=""
  position3_wrapper=""
  position4_wrapper=""
fi
if [ "$sessions_length" = 2 ] || [ "$sessions_length" = 3 ]; then
  position1_wrapper=""
  position4_wrapper=""

fi

echo "$position1_wrapper$position2_wrapper$center_piece_wrapper$position3_wrapper$position4_wrapper$position5_wrapper"

}

status_left () {
  windows=($(echo $(tmux list-windows -F '#W')))
  if [ "${#windows[@]}" = 1 ]; then
    echo "#[fg=#2c323c,bg=#98c379,none]  #{session_windows} "
  else
    windows_current=$(tmux display-message -p "#I")
    if [ "$windows_current" = 1 ]; then
      echo "#[fg=#2c323c,bg=#98c379,none]  #{session_windows} #[fg=#98c379,bg=#2c323c,nobold,nounderscore,noitalics]"
    else
      echo "#[fg=#2c323c,bg=#98c379,none]  #{session_windows} #[fg=#98c379,bg=#2c323c,nobold,nounderscore,noitalics]"
    fi
  fi
}

status_window () {
  windows_current=$(tmux display-message -p "#I")
  if [ "$windows_current" = 1 ]; then
    echo "#[fg=black,bg=green,none]#[fg=black,bg=green,none] #F #W #[fg=green,bg=#2c323c]"
  else
    echo "#[fg=black,bg=green,none] #F #W #[fg=green,bg=#2c323c]"
  fi
}

new () {

  project=$(get_reply 'New project name:')

  if [ ! -z "$project" ]; then

    project_type=$(printf "%s\n" "${project_types[@]}" | iconize_new | sort -k2 | fzf ${fzf_opts} --prompt=" Project type: " | awk -F' ' '{ print $(NF) }' )

    if [ -z $project_type ]; then
      exit
    fi

    project_language=$(printf "%s\n" "${project_languages[@]}" | iconize_new | sort -k2 | fzf ${fzf_opts} --prompt=" Project language: "  | awk -F' ' '{ print $(NF) }')

    if [ -z $project_language ]; then
      exit
    fi

    project_path=$default_projects_dir/$project_type/$project_language/$project

    if [ -d "$project_path" ]; then
      echo ""
      echo "  Sorry the project $project_path already exists"
      echo ""
      exit
    fi

    mkdir -p $project_path

    echo ""
    echo "  Project created at: ${project_path}"
    echo "  Opening session: $project"
    echo ""
    sleep 2

    dmux init $project_path

  elif [ -z "$project" ]; then

      echo ""
      echo "  Please provide a project name to this command e.g. dmux new [project_name]"
      echo ""
      exit
  fi
  sleep 2
  exit
}

clone () {

  set -o emacs
  bind '"\C-w": kill-whole-line'
  bind '"\e": "\C-w\C-d"'
  bind '"\e\e": "\C-w\C-d"'
  IFS= read -rep "  $(addc 'magenta' 'Clone repo url:') " || {
    read -st 1 -n 1000000
      exit 1
    }

  repo=$(echo $REPLY | awk -F' ' '{print $1}')
  repo_dir=$(echo $REPLY | awk -F' ' '{print $2}')

  if [ ! -z "$repo" ]; then

    if [ ! -z "$repo_dir" ]; then
      git_path=$repo_dir
    else
      git_path=$(basename $repo | cut -d . -f 1)
    fi

    project_type=$(printf "%s\n" "${project_types[@]}" | iconize_new | sort -k2 | fzf ${fzf_opts} --prompt=" Project type: " | awk -F' ' '{ print $(NF) }' )

    if [ -z $project_type ]; then
      exit
    fi

    project_language=$(printf "%s\n" "${project_languages[@]}" | iconize_new | sort -k2 | fzf ${fzf_opts} --prompt=" Project language: " | awk -F' ' '{ print $(NF) }')

    if [ -z $project_language ]; then
      exit
    fi

    project_path=$default_projects_dir/$project_type/$project_language/$git_path

    if [ -d "$project_path" ]; then
      echo ""
      echo "  Sorry the project $project_path already exists"
      echo ""
      exit
    fi

    mkdir -p $project_path

    git clone $repo $"$project_path"

    echo ""
    echo "  Project created at: ${project_path}"
    echo "  Opening session: $git_path"
    echo ""
    sleep 2

    dmux init $project_path

  elif [ -z "$repo" ]; then

      echo ""
      echo "  Please provide a project name to this command e.g. dmux clone [repo] [project_name]"
      echo ""
      exit
  fi

}
window_quit () {

  tmux_current_window="$(tmux display-message -p '#I'):$(tmux display-message -p '#W')"
  windows=($(echo $(tmux list-windows -F '#I')))
  windows_length=${#windows[@]}
  confirm=$(get_reply 'Close current window "'$tmux_current_window'"?')

  if [ "$windows_length" -gt 1 ]; then
    if [ "$confirm" = "yes" ]; then
      tmux kill-window
    fi
  fi
}

window () {
  if [ ! -z "$TMUX" ]; then
    tmux new-window 'vifm -c ":only" -c "set vicmd=dmux\ vim";bash -l' \; \
      set -g base-index 1 \; \
      setw -g pane-base-index 1 \; \
      split-window -h 'dmux vim;bash -l' \; \
      split-window -v \; \
      select-layout "${layout}" \; \
      select-pane -t 2
  fi
}

iconize_open () {
  while read data; do
    col1=$(echo $data | awk -F/ '{ print $(NF -2) }' )
    col2=$(echo $data | awk -F/ '{ print $(NF -1) }' )
    col3=$(echo $data | awk -F/ '{ print $(NF) }' )
    echo -e "$(addcolor ${icons[$col1]} $col1)  $col1 $(addcolor ${icons[$col2]} $col2) $col2 $col3"
  done
}

open () {
  if [ -z "$1" ]; then
    dir="$default_projects_dir"
  else
    dir=$1
  fi

  project_path="$(fd . $dir/**/* --type d -d 1 | iconize_open | sort -k5 | fzf ${fzf_opts} --prompt=" Open Project: " -d" " --with-nth="1,4,6" | awk -F' ' -v dir=$dir -v slash='/' '{print dir slash $(NF -3) slash $(NF -1) slash $(NF)}')"

  if [ -z "$project_path" ]; then
    exit
  fi

  dmux init $project_path
}

init () {
  if [ -z "$1" ]; then
    session_name=$(basename -- $(pwd))
    session_dir=$(pwd)
    session_file=''
    session_pane=1
    session_detached=""
    if [ ! -z "$(tmux ls 2> /dev/null | grep $session_name)" ]; then
      echo ""
      echo "  Found existing session: ${session_name}"
      echo "  Opening: ${session_name}"
      echo ""
      sleep 2
      if [ ! -z "$TMUX" ]; then
        tmux switch-client -t $session_name
      else
        tmux a -t ${session_name}
      fi
      exit
    fi
  elif [ ! -z "$1" ] && [ -d "$1" ]; then
    session_name=$(basename -- $1)
    session_dir=${1}
    session_file=''
    session_pane=1
    session_detached=""
    if [ ! -z "$(tmux ls 2> /dev/null | grep $session_name)" ]; then
      echo ""
      echo "  Found existing session: ${session_name}"
      echo "  Opening: ${session_name}"
      echo ""
      sleep 2
      if [ ! -z "$TMUX" ]; then
        tmux switch-client -t $session_name
      else
        tmux a -t ${session_name}
      fi
      exit
    fi
  elif [ ! -z "$1" ] && [ ! -d "$1" ] && [ -f "$1" ]; then
    if [ "$(dirname $1)" = "." ]; then
    session_name=$(basename $(pwd))
      session_dir=$(pwd)
    else
    session_name=$(basename -- $(dirname $1))
      session_dir=$(dirname $1)
    fi
    session_file=$1
    session_pane=2
    session_detached=""
    if [ ! -z "$(tmux ls 2> /dev/null | grep $session_name)" ]; then
      echo ""
      echo "  Found existing session: ${session_name}"
      echo "  Opening: ${session_name}"
      echo ""
      sleep 2
      if [ ! -z "$TMUX" ]; then
        tmux switch-client -t $session_name
      else
        tmux a -t ${session_name}
      fi
      exit
    fi
  fi

  if [ ! -z "$TMUX" ]; then
    session_connect="switch-client -t $session_name"
  else
    session_connect="attach -t $session_name"
  fi

  tmux \
    new-session -c ${session_dir} -d -s ${session_name}
  tmux \
    ${session_connect} \; \
    split-window -c ${session_dir} -h \; \
    split-window -c ${session_dir} -h \; \
    select-layout "${layout}" \; \
    send-keys -t 1 'dmux vifm' Enter \; \
    select-pane -t 1 \; \
    send-keys -t 2 'dmux vim' Enter \; \
    select-pane -t 2
    # bind-key -n S-Down select-pane -t 3 \\\; break-pane -d -n _terminal_pane \; \
    # bind-key -n S-Up select-pane -t 2 \\\; join-pane -s $.1 -l 10
}

# Check if the function exists (bash specific)
if declare -f "$1" > /dev/null
then
  # call arguments verbatim
  "$@"
else
  # Show a helpful error
  if [[ "${1}" == '' ]]; then
    init
  elif [[ -f "${1}" ]] || [[ -d "${1}" ]]; then
    init $1
  else
    echo ""
    echo "  Can't find a file or directory named \"$1\" is not a known function name" >&2
    echo "  and \"$1\" is not a known function name" >&2
    echo ""
    exit 1
  fi
fi

