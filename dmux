#!/usr/bin/env bash
if [ -z $(which tmux) ] || [ -z $(which fzf) ] || [ -z $(which fd) ] || [ -z $(which vifm) ] || [ -z $(which nvim) ] || [ -z $(which nvr) ]; then
  echo ""
  echo "  Please be sure that the following programs are installed:"
  echo ""
  echo "  - tmux"
  echo "  - vifm"
  echo "  - neovim"
  echo "  - neovim-remote"
  echo "  - fzf"
  echo "  - fd"
  echo ""
  echo "  ***MacOs Install***"
  echo ""
  echo "  brew install tmux vifm neovim fzf fd"
  echo "  pip3 neovim-remote"
  echo ""
  exit
fi

default_projects_dir="$HOME/Cloud/Development/projects"

declare -A fgcolor=(
  [none]=0
  [black]=30
  [red]=31
  [green]=32
  [yellow]=33
  [blue]=34
  [magenta]=35
  [cyan]=36
  [white]=37
)

declare -A bgcolor=(
  [black]=40
  [red]=41
  [green]=42
  [yellow]=43
  [blue]=44
  [magenta]=45
  [cyan]=46
  [white]=47
)

declare -A attributes=(
  [none]=0
  [bold]=1
  [underscore]=4
  [blink]=5
  [reverseVideo]=7
  [concealed]=8
)

declare -A types=(
  [web]=
  [desktop]=
  [game]=
  [mobile]=
  [cli]=
)

declare -A languages=(
  [ansible]=
  [docker]=
  [txt]=e
  [styl]=
  [scss]=
  [html]=
  [slim]=
  [ejs]=
  [wordpress]=
  [gulp]=
  [gulpfile]=
  [css]=
  [less]=
  [md]=
  [drupal]=
  [markdown]=
  [json]=
  [js]=
  # [code]=
  [jsx]=
  [ruby]=
  [gem]=
  [php]=
  [py]=
  [pyc]=
  [pyo]=
  [pyd]=
  [python]=
  [coffee]=
  [mustache]=
  [handlebars]=
  [hbs]=
  [conf]=
  [ini]=
  [yml]=
  [bat]=
  # [jpg]=
  # [jpeg]=
  # [bmp]=
  # [png]=
  # [gif]=
  # [ico]=
  [twig]=
  [cpp]=
  [c++]=
  [dotnet]=
  [c\#]=
  [cxx]=
  [cc]=
  [cp]=
  [c]=
  [hs]=
  [lhs]=
  [lua]=
  [java]=
  [bash]=$
  [sh]=
  [fish]=
  [ml]=λ
  [mli]=λ
  [diff]=
  [db]=
  [sql]=
  [dump]=
  [clj]=
  [cljc]=
  [cljs]=
  [edn]=
  [scala]=
  [go]=
  [dart]=
  [xul]=
  [sln]=
  [suo]=
  [pl]=
  [pm]=
  [t]=
  [rss]=
  [f#]=
  [fsscript]=
  [fsx]=
  [fs]=
  [fsi]=
  [rs]=
  [rlib]=
  [d]=
  [erl]=
  [hrl]=
  [vim]=
  [react]=
  [puppet]=
  [vue]=﵂
  [elm]=
  [swift]=
  # [vim]=
  # [ai]=
  # [psd]=
  # [psb]=
  [ts]=
  [tsx]=
  [jl]=
)

declare -A colormap=(
  [web]=blue
  [desktop]=yellow
  [game]=red
  [mobile]=magenta
  [cli]=green
  [ansible]=yellow
  [bash]=blue
  [ruby]=magenta
  [gem]=magenta
  [php]=blue
  [js]=yellow
  [go]=cyan
  [dart]=blue
  [puppet]=magenta
  [twig]=green
  [sass]=red
  [react]=blue
  [vim]=green
  [vue]=green
  [html]=yellow
  [css]=blue
  [dotnet]=magenta
  [drupal]=blue
  [markdown]=white
  [python]=blue
  [docker]=blue
  [coffee]=blue
  [ts]=blue
  [tsx]=blue
  [c\#]=magenta
  [gulp]=red
  [swift]=red
  [c++]=blue
  [cc]=blue
  [cpp]=blue
  [cxx]=blue
  [py]=blue
  [pyc]=blue
  [pyo]=blue
  [pyd]=blue
  [cp]=blue
  [db]=blue
  [sql]=blue
  [dump]=blue
  [java]=red
  [diff]=red
  [d]=red
  [lua]=blue
  [c]=blue
  [clj]=blue
  [cljc]=blue
  [cljs]=blue
  [edn]=blue
  [scala]=red
  [gulpfile]=red
  [wordpress]=white
)

declare -A icons=()

for i in "${!types[@]}"
do
  if [ -z "${icons[$i]}" ]; then
    icons[$i]=${types[$i]}
  fi
done

for i in "${!languages[@]}"
do
  if [ -z "${icons[$i]}" ]; then
    icons[$i]=${languages[$i]}
  fi
done

# Default color to none
for i in "${!languages[@]}"
do
  if [ -z "${colormap[$i]}" ]; then
    colormap[$i]=none
  fi
done

# Default color to none
for i in "${!types[@]}"
do
  if [ -z "${colormap[$i]}" ]; then
    colormap[$i]=none
  fi
done

project_types=()
project_languages=()

for i in "${!types[@]}"
do
  project_types+=("$i")
done

for i in "${!languages[@]}"
do
  project_languages+=("$i")
done

function devicons_get_filetype_symbol {

	local filetype
	local default=
	local exist_check=1
	local input=$1
	local type="$1"
	# using ## for possibly more than one "." (get after last one):
	local filetype="$type"

	if [ ! -z "$filetype" ] && [ ${extensions[$filetype]+$exist_check} ]; then
		local symbol=${extensions[$filetype]}
	else
		local symbol=$default
	fi

	echo "$symbol"

	return 0
}

vim () {
  if [ ! -z "$TMUX" ]; then
    tmux_current_session=$(tmux display-message -p '#S')
    tmux_current_window=$(tmux display-message -p '#I')
    tmux_current_pane=2
    tmux_nvim_socket=$(ls /tmp/ | grep ".*tmux-${tmux_current_session}-${tmux_current_window}-[1-9]-nvimsocket")

    if [[ $tmux_nvim_socket =~ ^tmux-${tmux_current_session}-(${tmux_current_window})-([1-9])-nvimsocket ]]; then
      tmux_target_pane=${BASH_REMATCH[2]}
    else
      tmux_target_pane=0
    fi

    nvim_remote_tmux_socket=/tmp/$tmux_nvim_socket

    if [ -S "/tmp/$tmux_nvim_socket" ] && [ $tmux_target_pane != 0 ]; then
      tmux select-pane -t $tmux_target_pane | nvr --servername $nvim_remote_tmux_socket "$@"
    else
      tmux_current_pane=2
      NVIM_LISTEN_ADDRESS=/tmp/tmux-$tmux_current_session-$tmux_current_window-$tmux_current_pane-nvimsocket nvim "$@"
    fi
  else
    NVIM_LISTEN_ADDRESS=/tmp/nvimsocket nvim "$@"
  fi
}

iconize_new () {
  while read data; do
    echo -e "$(addcolor ${icons[$data]} $data)  $data"
  done
}

addcolor () {

  prefix="\033["
  suffix="m"

  echo -e "$prefix${fgcolor[${colormap[$2]}]}$suffix$1$prefix${fgcolor[none]}$suffix"
}

new () {
  if [ ! -z "$TMUX" ]; then

    tmux new-window 'vifm -c ":only" -c "set vicmd=dmux\ vim";bash -l' \; \
      set -g base-index 1 \; \
      setw -g pane-base-index 1 \; \
      split-window -h 'dmux vim;bash -l' \; \
      split-window -v \; \
      select-layout '32f3,191x73,0,0{35x73,0,0,0,155x73,36,0[155x54,36,0,1,155x18,36,55,2]}' \; \
      select-pane -t 1

  elif [ -z "$TMUX" ] && [ ! -z "$1" ]; then
    #   print color[$2]$1color["blank"]"  "$2
    # }
    # {
    #   addcolor()
    # }' | sort -k2 | fzf --ansi --prompt="  What type of project is this? " --height 1% --reverse | awk -F' ' '{ print $(NF) }' )
    project_type=$(printf "%s\n" "${project_types[@]}" | iconize_new | sort -k2 | fzf --ansi --prompt="  What type of project is this? " --height 1% --reverse | awk -F' ' '{ print $(NF) }' )

    if [ -z $project_type ]; then
      exit
    fi

    project_language=$(printf "%s\n" "${project_languages[@]}" | iconize_new | sort -k2 | fzf --ansi --prompt="  What is the main technology used? " --height 30% --reverse | awk -F' ' '{ print $(NF) }')

    if [ -z $project_language ]; then
      exit
    fi

    project_path=$default_projects_dir/$project_type/$project_language/$1

    if [ -d "$project_path" ]; then
      echo ""
      echo "  Sorry the project $project_path already exists"
      echo ""
      exit
    fi

    mkdir -p $project_path

    echo ""
    echo "  Project created: ${project_path}"
    echo "  Opening..."
    echo ""
    sleep 2

    dmux init $project_path

  elif [ -z "$TMUX" ] && [ -z "$1" ]; then

      echo ""
      echo "  Please provide a project name to this command e.g. dmux new [project_name]"
      echo ""
      exit
  fi
}

iconize_open () {
  while read data; do
    col1=$(echo $data | awk -F/ '{ print $(NF -2) }' )
    col2=$(echo $data | awk -F/ '{ print $(NF -1) }' )
    col3=$(echo $data | awk -F/ '{ print $(NF) }' )
    echo -e "$(addcolor ${icons[$col1]} $col1)  $col1 $(addcolor ${icons[$col2]} $col2) $col2 $col3"
  done
}

open () {
  if [ -z "$1" ]; then
    dir="$default_projects_dir"
  else
    dir=$1
  fi

  project_path="$(fd . $dir/**/* --type d -d 1 | iconize_open | sort -k5 | fzf --ansi --prompt="  Open Project: $dir/> " --height 30% --reverse -d" " --with-nth 1,2,4,2,6 | awk -F' ' -v dir=$dir -v slash='/' '{print dir slash $(NF -3) slash $(NF -1) slash $(NF)}')"

  if [ -z "$project_path" ]; then
    exit
  fi

  dmux init $project_path
}

init () {
  if [ -z "$1" ]; then
    session_name=$(basename -- $(pwd))
    session_dir=$(pwd)
    session_file=''
    session_pane=1
    session_detached=""
  elif [ ! -z "$1" ] && [ -d "$1" ]; then
    session_name=$(basename -- $1)
    session_dir=${1}
    session_file=''
    session_pane=1
    session_detached=""
    if [ ! -z "$(tmux ls 2> /dev/null | grep $session_name)" ]; then
      echo ""
      echo "  Found existing session: ${session_name}"
      echo "  Opening: ${session_name}"
      echo ""
      sleep 5
      tmux a -t ${session_name}
      exit
    fi
  elif [ ! -z "$1" ] && [ ! -d "$1" ] && [ -f "$1" ]; then
    if [ "$(dirname $1)" = "." ]; then
    session_name=$(basename $(pwd))
      session_dir=$(pwd)
    else
    session_name=$(basename -- $(dirname $1))
      session_dir=$(dirname $1)
    fi
    session_file=$1
    session_pane=2
    session_detached=""
    if [ ! -z "$(tmux ls 2> /dev/null | grep $session_name)" ]; then
      echo ""
      echo "  Found existing session: ${session_name}"
      echo "  Opening: ${session_name}"
      echo ""
      sleep 5
      tmux a -t ${session_name}
      exit
    fi
  fi

  if [ ! -z "$TMUX" ]; then
    session_connect="switch-client -t $session_name"
  else
    session_connect="attach -t $session_name"
  fi

  tmux \
    new-session -c ${session_dir} -d -s ${session_name} 'vifm -c ":only" -c "set vicmd=dmux\ vim";bash -l'
  tmux \
    ${session_connect} \; \
    split-window -c ${session_dir} -h 'dmux vim '$session_file';bash -l' \; \
    split-window -c ${session_dir} -h \; \
    select-layout '32f3,191x73,0,0{35x73,0,0,0,155x73,36,0[155x54,36,0,1,155x18,36,55,2]}' \; \
    set -g base-index 1 \; \
    setw -g pane-base-index 1 \; \
    select-pane -t $session_pane \; \
    set -g status-keys vi \; \
    set -g history-limit 10000 \; \
    set -sg escape-time 0 \; \
    setw -g mode-keys vi \; \
    setw -g monitor-activity on \; \
    bind -n C-h select-pane -L \; \
    bind -n C-j select-pane -D \; \
    bind -n C-k select-pane -U \; \
    bind -n C-l select-pane -R \; \
    bind-key C-j resize-pane -D \; \
    bind-key C-k resize-pane -U \; \
    bind-key C-h resize-pane -L \; \
    bind-key C-l resize-pane -R \; \
    bind-key v split-window -h \; \
    bind-key s split-window -v \; \
    bind-key e run-shell 'dmux new' \; \
    bind-key -n C-z select-pane -t 2 \\\; resize-pane -Z \; \
    bind-key -n C-q kill-session \; \
    bind-key -n S-Down select-pane -t 3 \\\; break-pane -d -n _terminal_pane \; \
    bind-key -n S-Up select-pane -t 2 \\\; join-pane -s $.1 -l 10
}

# Check if the function exists (bash specific)
if declare -f "$1" > /dev/null
then
  # call arguments verbatim
  "$@"
else
  # Show a helpful error
  if [[ "${1}" == '' ]]; then
    init
  elif [[ -f "${1}" ]] || [[ -d "${1}" ]]; then
    init $1
  else
    echo "'$1' is not a known function name" >&2
    exit 1
  fi
fi
